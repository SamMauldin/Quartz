local function capsule()

	print("Bootloading started...")

	-- Store API's, frameworks, and data in here
	_G["A"] = {}

	A.run = function(prog, env)
		local env = env or {["runTime"] = "unknown"}
		local program = loadfile(prog)
		setmetatable( env, { __index = _G } )
		setfenv( program, env )
		if program then
			program()
		end
	end

	print("Running init...")

	-- Run all init programs
	for k,v in pairs(fs.list("/System/init")) do

		print("Loading "..v)

		local name = "/System/init/" .. v

	--Safety check
	if not fs.isDir(name) then
		A.run(name, {["runTime"] = "boot"})
	end
	end

	print("Loaded init")

	print("Loading frameworks")

	for k,v in pairs(fs.list("/System/frameworks")) do

		print("Loading "..v)

		local name = "/System/frameworks/" .. v

		--Safety check
		if not fs.isDir(name) then
			A.run(name, {["runTime"] = "framework"})
		end
	end

	print("Loaded frameworks")

	A.scratch:log("[Started]")

	sleep(0.25)

	A.run("/System/programs/main.lua", {["runTime"] = "boot", ["shell"] = shell})

	A.scratch:log("[Shutdown]")

	return false

end

local function handleError(err)
	if A.draw then
		local x, y = A.draw.getSize()
		A.draw.setColors(colors.white, colors.blue)
		for i = 1, y do
			A.draw.line(1, i, x, i)
			sleep(0.1)
		end
		term.setCursorPos(5, 2)
		write("Your system has crashed.")
		term.setCursorPos(5, 4)
		write("Error:")
		term.setCursorPos(6, 5)
		write(err, 6)
		sleep(5)
	else
		print("An error occurred while booting the system.")
		print("To maintain security, please repair or reinstall the system by booting of a disk.")
		print("Error: "..err)
	end
	if A.scratch then
		A.scratch:log("[Crash] " .. err)
	end
end

xpcall(capsule, handleError)

os.pullEvent("key")
os.shutdown()